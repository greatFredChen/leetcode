/*#include <stdio.h>
#include <stdlib.h>

typedef struct node {
	int key;
	struct node *next;
}KeyNode;

void bucket_sort(int keys[], int size, int bucket_size) {
	int i, j;
	KeyNode **bucket_table = (KeyNode **)malloc(bucket_size * sizeof(KeyNode*));
	for (i = 0; i < bucket_size; i++) {
		bucket_table[i] = (KeyNode*)malloc(sizeof(KeyNode));
		bucket_table[i]->key = 0;
		bucket_table[i]->next = NULL;
	}
	for (j = 0; j < size; j++) {
		KeyNode *node = (KeyNode *)malloc(sizeof(KeyNode));
		node->key = keys[j];
		node->next = NULL;
		int index = keys[j] / 10;
		KeyNode *p = bucket_table[index];
		if (p->key == 0) {
			bucket_table[index]->next = node;
			(bucket_table[index]->key)++;
		}
		else {
			while (p->next != NULL && p->next->key <= node->key)
				p = p->next;
			node->next = p->next;
			p->next = node;
			(bucket_table[index]->key)++;
		}
	}
	//print result
	KeyNode * k = NULL;
	for (i = 0; i < bucket_size; i++)
		for (k = bucket_table[i]->next; k != NULL; k = k->next)
			printf("%d ", k->key);
	printf("\n");
}


int main()
{
	int raw[] = { 49,38,65,97,76,13,27,49 };
	int size = sizeof(raw) / sizeof(int);
	bucket_sort(raw, size, 10);
}*/
#include<iostream>
#include<algorithm>//桶排序的简单linklist实现！
using namespace std;
typedef struct Node
{
	int key;
	struct Node *nex;//定义值和指向下一个元素的指针！
}keynode;
void bucketsort(int *arr, int size, int bucket_size)
{
	keynode **bucket_table = (keynode **)malloc(bucket_size*sizeof(keynode*));//定义二级指针桶列表！
	for (int i = 0; i < bucket_size; i++)//对二级指针（桶列表）里的每个桶进行动态分配！
	{
		bucket_table[i] = (keynode *)malloc(sizeof(keynode));
		bucket_table[i]->key = 0;
		bucket_table[i]->nex = NULL;
	}
	//开始填桶！
	for (int j = 0; j < size; j++)
	{
		keynode *node = (keynode *)malloc(sizeof(keynode));//动态分配
		node->key = arr[j];
		node->nex = NULL;
		int index = arr[j] / bucket_size;
		keynode *p = bucket_table[index];
		if (p->key==0)//桶内为空！
		{
			bucket_table[index]->nex = node;
			(bucket_table[index]->key)++;//不懂...
		}
		else
		{
			while (p->nex != NULL&&p->nex->key <= node->key)
				p = p->nex;
			//当新的数大于第k个结点的时候！
			node->nex = p->nex;
			p->nex = node;//链表插入！
			(bucket_table[index]->key)++;//不懂...
		}
		
	}
	keynode *k = NULL;
	//打印结果！
	for (int i = 0; i < bucket_size; i++)
		for (k = bucket_table[i]->nex; k != NULL; k = k->nex)
			cout << k->key << " ";
	cout << endl;
}
int main()
{
	int arr[] = { 49,38,65,97,76,13,27,49 };
	int size = sizeof(arr) / sizeof(int);
	int bucket_size = 10;
	bucketsort(arr, size, bucket_size);
	system("pause");
	return 0;
}
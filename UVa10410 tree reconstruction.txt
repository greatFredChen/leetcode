#include<iostream>
#include<stack>
#include<vector>
using namespace std;
vector<int>G[100 + 10];
stack<int>findson;
int pos[100 + 10];
int main()
{
	int n;
	while (cin >> n&&n)
	{
		int x;
		//输入bfs序列！同时进行编号！
		for (int i = 1; i <=n; i++)
		{
			cin >> x;
			pos[x] = i;
		}
		//dfs写入！dfs时记得逐步写入！
		int root;
		cin >> root;
		findson.push(root);
		for (int i = 1; i < n; i++)//逐步读入dfs 还有n-1个数字！！
		{
			int t;
			cin >> t;
			for (;;)
			{
				int u = findson.top();
				if (pos[u] + 1 < pos[t] || (pos[u] + 1 == pos[t] && u > t) || u == root)//三种情况：1.dfs中，根节点下一个结点必为子节点！
				   //2.pos[u]+1<pos[t]，3.pos[u]+1==pos[t]时满足u>t.排除兄弟结点即可（若u<t,则一定为同层兄弟结点！）
				{
					G[u].push_back(t);
					findson.push(t);
					break;
				}
				else//若不为子节点，则u已经为叶子结点，可以通过出栈返回！
					findson.pop();
			}
		}
		//开始输出！从第一个结点开始输出！
		for (int i = 1; i <= n; i++)
		{
			cout << i << "的子节点有：";
			if (!G[i].empty())
				for (int j = 0; j < G[i].size(); j++)
					cout << G[i][j] << " ";
			cout << endl;
		}
	}
	system("pause");
	return 0;
}